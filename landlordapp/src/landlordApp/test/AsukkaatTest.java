package landlordApp.test;
// Generated by ComTest BEGIN
import landlordApp.*;
import java.util.*;
import java.util.List;
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.24 16:50:25 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class AsukkaatTest {



  // Generated by ComTest BEGIN
  /** testLisaa44 */
  @Test
  public void testLisaa44() {    // Asukkaat: 44
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas asukas1 = new Asukas(1); Asukas asukas2 = new Asukas(1); 
    assertEquals("From: Asukkaat line: 47", 0, asukkaat.getLkm()); 
    asukkaat.lisaa(asukas1); assertEquals("From: Asukkaat line: 48", 1, asukkaat.getLkm()); 
    asukkaat.lisaa(asukas2); assertEquals("From: Asukkaat line: 49", 2, asukkaat.getLkm()); 
    asukkaat.lisaa(asukas2); assertEquals("From: Asukkaat line: 50", 3, asukkaat.getLkm()); 
    assertEquals("From: Asukkaat line: 51", asukas1, asukkaat.anna(0)); 
    assertEquals("From: Asukkaat line: 52", asukas2, asukkaat.anna(1)); 
    assertEquals("From: Asukkaat line: 53", asukas2, asukkaat.anna(2)); 
    assertEquals("From: Asukkaat line: 54", false, asukkaat.anna(1) == asukas1); 
    assertEquals("From: Asukkaat line: 55", true, asukkaat.anna(1) == asukas2); 
    try {
    assertEquals("From: Asukkaat line: 56", asukas1, asukkaat.anna(3)); 
    fail("Asukkaat: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    asukkaat.lisaa(asukas1); assertEquals("From: Asukkaat line: 57", 4, asukkaat.getLkm()); 
    asukkaat.lisaa(asukas1); assertEquals("From: Asukkaat line: 58", 5, asukkaat.getLkm()); 
    asukkaat.lisaa(asukas1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa71 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa71() throws SailoException,CloneNotSupportedException {    // Asukkaat: 71
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas aku1 = new Asukas(), aku2 = new Asukas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    assertEquals("From: Asukkaat line: 77", 0, asukkaat.getLkm()); 
    asukkaat.korvaaTaiLisaa(aku1); assertEquals("From: Asukkaat line: 78", 1, asukkaat.getLkm()); 
    asukkaat.korvaaTaiLisaa(aku2); assertEquals("From: Asukkaat line: 79", 2, asukkaat.getLkm()); 
    Asukas aku3 = aku1.clone(); 
    aku3.aseta(3,"kkk"); 
    Iterator<Asukas> it = asukkaat.iterator(); 
    assertEquals("From: Asukkaat line: 83", true, it.next() == aku1); 
    asukkaat.korvaaTaiLisaa(aku3); assertEquals("From: Asukkaat line: 84", 2, asukkaat.getLkm()); 
    it = asukkaat.iterator(); 
    Asukas j0 = it.next(); 
    assertEquals("From: Asukkaat line: 87", aku3, j0); 
    assertEquals("From: Asukkaat line: 88", true, j0 == aku3); 
    assertEquals("From: Asukkaat line: 89", false, j0 == aku1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator150 */
  @Test
  public void testIterator150() {    // Asukkaat: 150
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas pitsi21 = new Asukas(2); asukkaat.lisaa(pitsi21); 
    Asukas pitsi11 = new Asukas(1); asukkaat.lisaa(pitsi11); 
    Asukas pitsi22 = new Asukas(2); asukkaat.lisaa(pitsi22); 
    Asukas pitsi12 = new Asukas(1); asukkaat.lisaa(pitsi12); 
    Asukas pitsi23 = new Asukas(2); asukkaat.lisaa(pitsi23); 
    Iterator<Asukas> i2=asukkaat.iterator(); 
    assertEquals("From: Asukkaat line: 162", pitsi21, i2.next()); 
    assertEquals("From: Asukkaat line: 163", pitsi11, i2.next()); 
    assertEquals("From: Asukkaat line: 164", pitsi22, i2.next()); 
    assertEquals("From: Asukkaat line: 165", pitsi12, i2.next()); 
    assertEquals("From: Asukkaat line: 166", pitsi23, i2.next()); 
    try {
    assertEquals("From: Asukkaat line: 167", pitsi12, i2.next()); 
    fail("Asukkaat: 167 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Asukas as:asukkaat ) {
    assertEquals("From: Asukkaat line: 173", jnrot[n], as.getAsuntoId()); n++; 
    }
    assertEquals("From: Asukkaat line: 176", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaAsukkaat191 */
  @Test
  public void testAnnaAsukkaat191() {    // Asukkaat: 191
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas asukas1 = new Asukas(1); 
    Asukas asukas2 = new Asukas(2); 
    Asukas asukas3 = new Asukas(1); 
    asukkaat.lisaa(asukas1); 
    asukkaat.lisaa(asukas2); 
    asukkaat.lisaa(asukas3); 
    List<Asukas> loydetyt1 = asukkaat.annaAsukkaat(1); 
    assertEquals("From: Asukkaat line: 200", 2, loydetyt1.size()); 
    List<Asukas> loydetyt2 = asukkaat.annaAsukkaat(2); 
    assertEquals("From: Asukkaat line: 202", 1, loydetyt2.size()); 
    assertEquals("From: Asukkaat line: 203", asukas1, loydetyt1.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta220 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta220() throws SailoException {    // Asukkaat: 220
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas pitsi21 = new Asukas(); pitsi21.taytaOletus(); 
    Asukas pitsi11 = new Asukas(); pitsi11.taytaOletus(); 
    Asukas pitsi22 = new Asukas(); pitsi22.taytaOletus(); 
    Asukas pitsi12 = new Asukas(); pitsi12.taytaOletus(); 
    Asukas pitsi23 = new Asukas(); pitsi23.taytaOletus(); 
    String tiedNimi = "testiasukkaat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    asukkaat.lueTiedostosta(tiedNimi); 
    fail("Asukkaat: 233 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    asukkaat.lisaa(pitsi21); 
    asukkaat.lisaa(pitsi11); 
    asukkaat.lisaa(pitsi22); 
    asukkaat.lisaa(pitsi12); 
    asukkaat.lisaa(pitsi23); 
    asukkaat.tallenna(); 
    asukkaat = new Asukkaat(); 
    asukkaat.lueTiedostosta(tiedNimi); 
    Iterator<Asukas> i = asukkaat.iterator(); 
    assertEquals("From: Asukkaat line: 243", pitsi21.toString(), i.next().toString()); 
    assertEquals("From: Asukkaat line: 244", pitsi11.toString(), i.next().toString()); 
    assertEquals("From: Asukkaat line: 245", pitsi22.toString(), i.next().toString()); 
    assertEquals("From: Asukkaat line: 246", pitsi12.toString(), i.next().toString()); 
    assertEquals("From: Asukkaat line: 247", pitsi23.toString(), i.next().toString()); 
    assertEquals("From: Asukkaat line: 248", false, i.hasNext()); 
    asukkaat.lisaa(pitsi23); 
    asukkaat.tallenna(); 
    assertEquals("From: Asukkaat line: 251", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Asukkaat line: 253", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi279 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi279() throws SailoException {    // Asukkaat: 279
    Asukkaat jasenet = new Asukkaat(); 
    Asukas jasen1 = new Asukas(); jasen1.parse("2|2|Eelis|Koivusaari|0405219330|eelis.koivusaari@gmail.com|19"); 
    Asukas jasen2 = new Asukas(); jasen2.parse("3|2|Eero|Koivusaari|0405219330|Eero.koivusaari@gmail.com|15"); 
    Asukas jasen3 = new Asukas(); jasen3.parse("4|4|Nico|Kääriäinen|0405219330|the.gamer@gmail.com|19"); 
    Asukas jasen4 = new Asukas(); jasen4.parse("5|1|Naku|Ankka|0405219330|a.ku@gmail.com|28"); 
    Asukas jasen5 = new Asukas(); jasen5.parse("3|1|Beef|Turkay|0405219330|beed.turkay@gmail.com|33"); 
    jasenet.lisaa(jasen1); jasenet.lisaa(jasen2); jasenet.lisaa(jasen3); jasenet.lisaa(jasen4); jasenet.lisaa(jasen5); 
    List<Asukas> loytyneet; 
    loytyneet = (List<Asukas>)jasenet.etsi("*n*",2); 
    assertEquals("From: Asukkaat line: 290", 2, loytyneet.size()); 
    assertEquals("From: Asukkaat line: 291", true, loytyneet.get(0) == jasen4); 
    assertEquals("From: Asukkaat line: 292", true, loytyneet.get(1) == jasen3); 
    loytyneet = (List<Asukas>)jasenet.etsi("*e*",2); 
    assertEquals("From: Asukkaat line: 295", 3, loytyneet.size()); 
    assertEquals("From: Asukkaat line: 296", true, loytyneet.get(0) == jasen5); 
    assertEquals("From: Asukkaat line: 297", true, loytyneet.get(1) == jasen1); 
    loytyneet = (List<Asukas>)jasenet.etsi(null,-1); 
    assertEquals("From: Asukkaat line: 300", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista320 */
  @Test
  public void testPoista320() {    // Asukkaat: 320
    Asukkaat asukkaat = new Asukkaat(); 
    Asukas aku1 = new Asukas(), aku2 = new Asukas(), aku3 = new Asukas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getId(); 
    asukkaat.lisaa(aku1); asukkaat.lisaa(aku2); asukkaat.lisaa(aku3); 
    assertEquals("From: Asukkaat line: 326", 1, asukkaat.poista(id1+1)); 
    assertEquals("From: Asukkaat line: 327", null, asukkaat.annaId(id1+1)); assertEquals("From: Asukkaat line: 327", 2, asukkaat.getLkm()); 
    assertEquals("From: Asukkaat line: 328", 1, asukkaat.poista(id1)); assertEquals("From: Asukkaat line: 328", 1, asukkaat.getLkm()); 
    assertEquals("From: Asukkaat line: 329", 0, asukkaat.poista(id1+3)); assertEquals("From: Asukkaat line: 329", 1, asukkaat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaAsunnonAsukkaat345 */
  @Test
  public void testPoistaAsunnonAsukkaat345() {    // Asukkaat: 345
    Asukkaat harrasteet = new Asukkaat(); 
    Asukas pitsi21 = new Asukas(); pitsi21.rekisteroi(); pitsi21.setAsuntoId(2); 
    Asukas pitsi11 = new Asukas(); pitsi11.rekisteroi(); pitsi11.setAsuntoId(1); 
    Asukas pitsi22 = new Asukas(); pitsi22.rekisteroi(); pitsi22.setAsuntoId(2); 
    Asukas pitsi12 = new Asukas(); pitsi12.rekisteroi(); pitsi12.setAsuntoId(1); 
    Asukas pitsi23 = new Asukas(); pitsi23.rekisteroi(); pitsi23.setAsuntoId(2); 
    harrasteet.lisaa(pitsi21); 
    harrasteet.lisaa(pitsi11); 
    harrasteet.lisaa(pitsi22); 
    harrasteet.lisaa(pitsi12); 
    harrasteet.lisaa(pitsi23); 
    assertEquals("From: Asukkaat line: 357", 3, harrasteet.poistaAsunnonAsukkaat(2)); assertEquals("From: Asukkaat line: 357", 2, harrasteet.getLkm()); 
    assertEquals("From: Asukkaat line: 358", 0, harrasteet.poistaAsunnonAsukkaat(3)); assertEquals("From: Asukkaat line: 358", 2, harrasteet.getLkm()); 
    List<Asukas> h = harrasteet.annaAsukkaat(2); 
    assertEquals("From: Asukkaat line: 360", 0, h.size()); 
    h = harrasteet.annaAsukkaat(1); 
    assertEquals("From: Asukkaat line: 362", pitsi11, h.get(0)); 
    assertEquals("From: Asukkaat line: 363", pitsi12, h.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaId392 */
  @Test
  public void testAnnaId392() {    // Asukkaat: 392
    Asukkaat jasenet = new Asukkaat(); 
    Asukas aku1 = new Asukas(), aku2 = new Asukas(), aku3 = new Asukas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getId(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asukkaat line: 398", true, jasenet.annaId(id1  ) == aku1); 
    assertEquals("From: Asukkaat line: 399", true, jasenet.annaId(id1+1) == aku2); 
    assertEquals("From: Asukkaat line: 400", true, jasenet.annaId(id1+2) == aku3); 
  } // Generated by ComTest END
}