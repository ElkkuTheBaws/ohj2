package landlordApp.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import landlordApp.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.23 18:36:51 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class AsunnotTest {



  // Generated by ComTest BEGIN
  /** testLisaa41 */
  @Test
  public void testLisaa41() {    // Asunnot: 41
    Asunnot asunnot = new Asunnot(); 
    Asunto asunto1 = new Asunto(1); Asunto asunto2 = new Asunto(1); 
    assertEquals("From: Asunnot line: 44", 0, asunnot.getLkm()); 
    asunnot.lisaa(asunto1); assertEquals("From: Asunnot line: 45", 1, asunnot.getLkm()); 
    asunnot.lisaa(asunto2); assertEquals("From: Asunnot line: 46", 2, asunnot.getLkm()); 
    asunnot.lisaa(asunto2); assertEquals("From: Asunnot line: 47", 3, asunnot.getLkm()); 
    assertEquals("From: Asunnot line: 48", asunto1, asunnot.anna(0)); 
    assertEquals("From: Asunnot line: 49", asunto2, asunnot.anna(1)); 
    assertEquals("From: Asunnot line: 50", asunto2, asunnot.anna(2)); 
    assertEquals("From: Asunnot line: 51", false, asunnot.anna(1) == asunto1); 
    assertEquals("From: Asunnot line: 52", true, asunnot.anna(1) == asunto2); 
    try {
    assertEquals("From: Asunnot line: 53", asunto1, asunnot.anna(3)); 
    fail("Asunnot: 53 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    asunnot.lisaa(asunto1); assertEquals("From: Asunnot line: 54", 4, asunnot.getLkm()); 
    asunnot.lisaa(asunto1); assertEquals("From: Asunnot line: 55", 5, asunnot.getLkm()); 
    asunnot.lisaa(asunto1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista82 
   * @throws SailoException when error
   */
  @Test
  public void testPoista82() throws SailoException {    // Asunnot: 82
    Asunnot harrasteet = new Asunnot(); 
    Asunto pitsi21 = new Asunto(); pitsi21.rekisteroi(); pitsi21.setTaloId(2); 
    Asunto pitsi11 = new Asunto(); pitsi11.rekisteroi(); pitsi11.setTaloId(1); 
    Asunto pitsi22 = new Asunto(); pitsi22.rekisteroi(); pitsi22.setTaloId(2); 
    Asunto pitsi12 = new Asunto(); pitsi12.rekisteroi(); pitsi12.setTaloId(1); 
    Asunto pitsi23 = new Asunto(); pitsi23.rekisteroi(); pitsi23.setTaloId(2); 
    harrasteet.lisaa(pitsi21); 
    harrasteet.lisaa(pitsi11); 
    harrasteet.lisaa(pitsi22); 
    harrasteet.lisaa(pitsi12); 
    assertEquals("From: Asunnot line: 95", false, harrasteet.poista(pitsi23)); assertEquals("From: Asunnot line: 95", 4, harrasteet.getLkm()); 
    assertEquals("From: Asunnot line: 96", true, harrasteet.poista(pitsi11)); assertEquals("From: Asunnot line: 96", 3, harrasteet.getLkm()); 
    List<Asunto> h = harrasteet.annaAsunnot(1); 
    assertEquals("From: Asunnot line: 98", 1, h.size()); 
    assertEquals("From: Asunnot line: 99", pitsi12, h.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaTalonAsunnot114 */
  @Test
  public void testPoistaTalonAsunnot114() {    // Asunnot: 114
    Asunnot harrasteet = new Asunnot(); 
    Asunto pitsi21 = new Asunto(); pitsi21.rekisteroi(); pitsi21.setTaloId(2); 
    Asunto pitsi11 = new Asunto(); pitsi11.rekisteroi(); pitsi11.setTaloId(1); 
    Asunto pitsi22 = new Asunto(); pitsi22.rekisteroi(); pitsi22.setTaloId(2); 
    Asunto pitsi12 = new Asunto(); pitsi12.rekisteroi(); pitsi12.setTaloId(1); 
    Asunto pitsi23 = new Asunto(); pitsi23.rekisteroi(); pitsi23.setTaloId(2); 
    harrasteet.lisaa(pitsi21); 
    harrasteet.lisaa(pitsi11); 
    harrasteet.lisaa(pitsi22); 
    harrasteet.lisaa(pitsi12); 
    harrasteet.lisaa(pitsi23); 
    assertEquals("From: Asunnot line: 126", 3, harrasteet.poistaTalonAsunnot(2)); assertEquals("From: Asunnot line: 126", 2, harrasteet.getLkm()); 
    assertEquals("From: Asunnot line: 127", 0, harrasteet.poistaTalonAsunnot(3)); assertEquals("From: Asunnot line: 127", 2, harrasteet.getLkm()); 
    List<Asunto> h = harrasteet.annaAsunnot(2); 
    assertEquals("From: Asunnot line: 129", 0, h.size()); 
    h = harrasteet.annaAsunnot(1); 
    assertEquals("From: Asunnot line: 131", pitsi11, h.get(0)); 
    assertEquals("From: Asunnot line: 132", pitsi12, h.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta194 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta194() throws SailoException {    // Asunnot: 194
    Asunnot asunnot = new Asunnot(); 
    Asunto pitsi21 = new Asunto(); pitsi21.taytaOletus(); 
    Asunto pitsi11 = new Asunto(); pitsi11.taytaOletus(); 
    Asunto pitsi22 = new Asunto(); pitsi22.taytaOletus(); 
    Asunto pitsi12 = new Asunto(); pitsi12.taytaOletus(); 
    Asunto pitsi23 = new Asunto(); pitsi23.taytaOletus(); 
    String tiedNimi = "testiasunnot"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    asunnot.lueTiedostosta(tiedNimi); 
    fail("Asunnot: 207 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    asunnot.lisaa(pitsi21); 
    asunnot.lisaa(pitsi11); 
    asunnot.lisaa(pitsi22); 
    asunnot.lisaa(pitsi12); 
    asunnot.lisaa(pitsi23); 
    asunnot.tallenna(); 
    asunnot = new Asunnot(); 
    asunnot.lueTiedostosta(tiedNimi); 
    Iterator<Asunto> i = asunnot.iterator(); 
    assertEquals("From: Asunnot line: 217", pitsi21.toString(), i.next().toString()); 
    assertEquals("From: Asunnot line: 218", pitsi11.toString(), i.next().toString()); 
    assertEquals("From: Asunnot line: 219", pitsi22.toString(), i.next().toString()); 
    assertEquals("From: Asunnot line: 220", pitsi12.toString(), i.next().toString()); 
    assertEquals("From: Asunnot line: 221", pitsi23.toString(), i.next().toString()); 
    assertEquals("From: Asunnot line: 222", false, i.hasNext()); 
    asunnot.lisaa(pitsi23); 
    asunnot.tallenna(); 
    assertEquals("From: Asunnot line: 225", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Asunnot line: 227", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator285 */
  @Test
  public void testIterator285() {    // Asunnot: 285
    Asunnot asunnot = new Asunnot(); 
    Asunto pitsi21 = new Asunto(2); asunnot.lisaa(pitsi21); 
    Asunto pitsi11 = new Asunto(1); asunnot.lisaa(pitsi11); 
    Asunto pitsi22 = new Asunto(2); asunnot.lisaa(pitsi22); 
    Asunto pitsi12 = new Asunto(1); asunnot.lisaa(pitsi12); 
    Asunto pitsi23 = new Asunto(2); asunnot.lisaa(pitsi23); 
    Iterator<Asunto> i2=asunnot.iterator(); 
    assertEquals("From: Asunnot line: 297", pitsi21, i2.next()); 
    assertEquals("From: Asunnot line: 298", pitsi11, i2.next()); 
    assertEquals("From: Asunnot line: 299", pitsi22, i2.next()); 
    assertEquals("From: Asunnot line: 300", pitsi12, i2.next()); 
    assertEquals("From: Asunnot line: 301", pitsi23, i2.next()); 
    try {
    assertEquals("From: Asunnot line: 302", pitsi12, i2.next()); 
    fail("Asunnot: 302 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Asunto as:asunnot ) {
    assertEquals("From: Asunnot line: 308", jnrot[n], as.getTaloId()); n++; 
    }
    assertEquals("From: Asunnot line: 311", 5, n); 
  } // Generated by ComTest END
}