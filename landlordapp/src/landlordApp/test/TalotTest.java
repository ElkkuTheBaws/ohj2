package landlordApp.test;
// Generated by ComTest BEGIN
import landlordApp.*;
import java.util.*;
import java.io.File;
import java.util.Iterator;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.24 14:18:52 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class TalotTest {



  // Generated by ComTest BEGIN
  /** testLisaa53 */
  @Test
  public void testLisaa53() {    // Talot: 53
    Talot talot = new Talot(); 
    Talo talo1 = new Talo(); Talo talo2 = new Talo(); 
    assertEquals("From: Talot line: 56", 0, talot.getLkm()); 
    talot.lisaa(talo1); assertEquals("From: Talot line: 57", 1, talot.getLkm()); 
    talot.lisaa(talo2); assertEquals("From: Talot line: 58", 2, talot.getLkm()); 
    talot.lisaa(talo2); assertEquals("From: Talot line: 59", 3, talot.getLkm()); 
    assertEquals("From: Talot line: 60", talo1, talot.anna(0)); 
    assertEquals("From: Talot line: 61", talo2, talot.anna(1)); 
    assertEquals("From: Talot line: 62", talo2, talot.anna(2)); 
    assertEquals("From: Talot line: 63", false, talot.anna(1) == talo1); 
    assertEquals("From: Talot line: 64", true, talot.anna(1) == talo2); 
    try {
    assertEquals("From: Talot line: 65", talo1, talot.anna(3)); 
    fail("Talot: 65 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    talot.lisaa(talo1); assertEquals("From: Talot line: 66", 4, talot.getLkm()); 
    talot.lisaa(talo1); assertEquals("From: Talot line: 67", 5, talot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi106 */
  @Test
  public void testEtsi106() {    // Talot: 106
    Talot taloet = new Talot(); 
    Talo talo1 = new Talo(); talo1.parse("2|2|Eelis|Koivusaari|0405219330|eelis.koivusaari@gmail.com|19"); 
    Talo talo2 = new Talo(); talo2.parse("3|2|Eero|Koivusaari|0405219330|Eero.koivusaari@gmail.com|15"); 
    Talo talo3 = new Talo(); talo3.parse("4|4|Nico|Kääriäinen|0405219330|the.gamer@gmail.com|19"); 
    Talo talo4 = new Talo(); talo4.parse("5|1|Naku|Ankka|0405219330|a.ku@gmail.com|28"); 
    Talo talo5 = new Talo(); talo5.parse("3|1|Beef|Turkay|0405219330|beed.turkay@gmail.com|33"); 
    taloet.lisaa(talo1); taloet.lisaa(talo2); taloet.lisaa(talo3); taloet.lisaa(talo4); taloet.lisaa(talo5); 
    List<Talo> loytyneet; 
    loytyneet = (List<Talo>)taloet.etsi("*n*",2); 
    assertEquals("From: Talot line: 116", 2, loytyneet.size()); 
    assertEquals("From: Talot line: 117", true, loytyneet.get(0) == talo4); 
    assertEquals("From: Talot line: 118", true, loytyneet.get(1) == talo3); 
    loytyneet = (List<Talo>)taloet.etsi("*e*",2); 
    assertEquals("From: Talot line: 121", 3, loytyneet.size()); 
    assertEquals("From: Talot line: 122", true, loytyneet.get(0) == talo5); 
    assertEquals("From: Talot line: 123", true, loytyneet.get(1) == talo1); 
    loytyneet = (List<Talo>)taloet.etsi(null,-1); 
    assertEquals("From: Talot line: 126", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaId168 */
  @Test
  public void testAnnaId168() {    // Talot: 168
    Talot talot = new Talot(); 
    Talo aku1 = new Talo(), aku2 = new Talo(), aku3 = new Talo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getId(); 
    talot.lisaa(aku1); talot.lisaa(aku2); talot.lisaa(aku3); 
    assertEquals("From: Talot line: 174", true, talot.annaId(id1  ) == aku1); 
    assertEquals("From: Talot line: 175", true, talot.annaId(id1+1) == aku2); 
    assertEquals("From: Talot line: 176", true, talot.annaId(id1+2) == aku3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista192 
   * @throws SailoException when error
   */
  @Test
  public void testPoista192() throws SailoException {    // Talot: 192
    Talot talot = new Talot(); 
    Talo aku1 = new Talo(), aku2 = new Talo(), aku3 = new Talo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getId(); 
    talot.lisaa(aku1); talot.lisaa(aku2); talot.lisaa(aku3); 
    assertEquals("From: Talot line: 199", 1, talot.poista(id1+1)); 
    assertEquals("From: Talot line: 200", null, talot.annaId(id1+1)); assertEquals("From: Talot line: 200", 2, talot.getLkm()); 
    assertEquals("From: Talot line: 201", 1, talot.poista(id1)); assertEquals("From: Talot line: 201", 1, talot.getLkm()); 
    assertEquals("From: Talot line: 202", 0, talot.poista(id1+3)); assertEquals("From: Talot line: 202", 1, talot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTalotIterator223 
   * @throws SailoException when error
   */
  @Test
  public void testTalotIterator223() throws SailoException {    // Talot: 223
    Talot talot = new Talot(); 
    Talo aku1 = new Talo(), aku2 = new Talo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    talot.lisaa(aku1); 
    talot.lisaa(aku2); 
    talot.lisaa(aku1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Talo talo:talot) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+talo.getId()); 
    String tulos = " " + aku1.getId() + " " + aku2.getId() + " " + aku1.getId(); 
    assertEquals("From: Talot line: 242", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Talo>  i=talot.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Talo talo = i.next(); 
    ids.append(" "+talo.getId()); 
    }
    assertEquals("From: Talot line: 250", tulos, ids.toString()); 
    Iterator<Talo>  i=talot.iterator(); 
    assertEquals("From: Talot line: 253", true, i.next() == aku1); 
    assertEquals("From: Talot line: 254", true, i.next() == aku2); 
    assertEquals("From: Talot line: 255", true, i.next() == aku1); 
    try {
    i.next(); 
    fail("Talot: 257 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta345 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta345() throws SailoException {    // Talot: 345
    Talot talot = new Talot(); 
    Talo pitsi21 = new Talo(); pitsi21.taytaOletus(); 
    Talo pitsi11 = new Talo(); pitsi11.taytaOletus(); 
    Talo pitsi22 = new Talo(); pitsi22.taytaOletus(); 
    Talo pitsi12 = new Talo(); pitsi12.taytaOletus(); 
    Talo pitsi23 = new Talo(); pitsi23.taytaOletus(); 
    String tiedNimi = "testitalot"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    talot.lueTiedostosta(tiedNimi); 
    fail("Talot: 358 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    talot.lisaa(pitsi21); 
    talot.lisaa(pitsi11); 
    talot.lisaa(pitsi22); 
    talot.lisaa(pitsi12); 
    talot.lisaa(pitsi23); 
    talot.tallenna(); 
    talot = new Talot(); 
    talot.lueTiedostosta(tiedNimi); 
    Iterator<Talo> i = talot.iterator(); 
    assertEquals("From: Talot line: 368", pitsi21.toString(), i.next().toString()); 
    assertEquals("From: Talot line: 369", pitsi11.toString(), i.next().toString()); 
    assertEquals("From: Talot line: 370", pitsi22.toString(), i.next().toString()); 
    assertEquals("From: Talot line: 371", pitsi12.toString(), i.next().toString()); 
    assertEquals("From: Talot line: 372", pitsi23.toString(), i.next().toString()); 
    assertEquals("From: Talot line: 373", false, i.hasNext()); 
    talot.lisaa(pitsi23); 
    talot.tallenna(); 
    assertEquals("From: Talot line: 376", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Talot line: 378", true, fbak.delete()); 
  } // Generated by ComTest END
}