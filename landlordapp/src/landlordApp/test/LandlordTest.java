package landlordApp.test;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import landlordApp.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.24 16:49:39 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class LandlordTest {



  // Generated by ComTest BEGIN
  /** testLisaa61 */
  @Test
  public void testLisaa61() {    // Landlord: 61
    Landlord landlord = new Landlord(); 
    Talo talo1 = new Talo(); Talo talo2 = new Talo(); 
    assertEquals("From: Landlord line: 64", 0, landlord.getTaloja()); 
    landlord.lisaa(talo1); assertEquals("From: Landlord line: 65", 1, landlord.getTaloja()); 
    landlord.lisaa(talo2); assertEquals("From: Landlord line: 66", 2, landlord.getTaloja()); 
    landlord.lisaa(talo2); assertEquals("From: Landlord line: 67", 3, landlord.getTaloja()); 
    assertEquals("From: Landlord line: 68", talo1, landlord.annaTalo(0)); 
    assertEquals("From: Landlord line: 69", talo2, landlord.annaTalo(1)); 
    assertEquals("From: Landlord line: 70", talo2, landlord.annaTalo(2)); 
    assertEquals("From: Landlord line: 71", false, landlord.annaTalo(1) == talo1); 
    assertEquals("From: Landlord line: 72", true, landlord.annaTalo(1) == talo2); 
    try {
    assertEquals("From: Landlord line: 73", talo1, landlord.annaTalo(3)); 
    fail("Landlord: 73 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    landlord.lisaa(talo1); assertEquals("From: Landlord line: 74", 4, landlord.getTaloja()); 
    landlord.lisaa(talo1); assertEquals("From: Landlord line: 75", 5, landlord.getTaloja()); 
    landlord.lisaa(talo1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa95 */
  @Test
  public void testLisaa95() {    // Landlord: 95
    Landlord landlord = new Landlord(); 
    Asunto asunto1 = new Asunto(1); Asunto asunto2 = new Asunto(1); 
    assertEquals("From: Landlord line: 98", 0, landlord.getAsuntoja()); 
    landlord.lisaa(asunto1); assertEquals("From: Landlord line: 99", 1, landlord.getAsuntoja()); 
    landlord.lisaa(asunto2); assertEquals("From: Landlord line: 100", 2, landlord.getAsuntoja()); 
    landlord.lisaa(asunto2); assertEquals("From: Landlord line: 101", 3, landlord.getAsuntoja()); 
    assertEquals("From: Landlord line: 102", asunto1, landlord.annaAsunto(0)); 
    assertEquals("From: Landlord line: 103", asunto2, landlord.annaAsunto(1)); 
    assertEquals("From: Landlord line: 104", asunto2, landlord.annaAsunto(2)); 
    assertEquals("From: Landlord line: 105", false, landlord.annaAsunto(1) == asunto1); 
    assertEquals("From: Landlord line: 106", true, landlord.annaAsunto(1) == asunto2); 
    try {
    assertEquals("From: Landlord line: 107", asunto1, landlord.annaAsunto(3)); 
    fail("Landlord: 107 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    landlord.lisaa(asunto1); assertEquals("From: Landlord line: 108", 4, landlord.getAsuntoja()); 
    landlord.lisaa(asunto1); assertEquals("From: Landlord line: 109", 5, landlord.getAsuntoja()); 
    landlord.lisaa(asunto1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa121 */
  @Test
  public void testLisaa121() {    // Landlord: 121
    Landlord landlord = new Landlord(); 
    Asukas asukas1 = new Asukas(1); Asukas asukas2 = new Asukas(1); 
    assertEquals("From: Landlord line: 124", 0, landlord.getAsukkaita()); 
    landlord.lisaa(asukas1); assertEquals("From: Landlord line: 125", 1, landlord.getAsukkaita()); 
    landlord.lisaa(asukas2); assertEquals("From: Landlord line: 126", 2, landlord.getAsukkaita()); 
    landlord.lisaa(asukas2); assertEquals("From: Landlord line: 127", 3, landlord.getAsukkaita()); 
    assertEquals("From: Landlord line: 128", asukas1, landlord.annaAsukas(0)); 
    assertEquals("From: Landlord line: 129", asukas2, landlord.annaAsukas(1)); 
    assertEquals("From: Landlord line: 130", asukas2, landlord.annaAsukas(2)); 
    assertEquals("From: Landlord line: 131", false, landlord.annaAsukas(1) == asukas1); 
    assertEquals("From: Landlord line: 132", true, landlord.annaAsukas(1) == asukas2); 
    try {
    assertEquals("From: Landlord line: 133", asukas1, landlord.annaAsukas(3)); 
    fail("Landlord: 133 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    landlord.lisaa(asukas1); assertEquals("From: Landlord line: 134", 4, landlord.getAsukkaita()); 
    landlord.lisaa(asukas1); assertEquals("From: Landlord line: 135", 5, landlord.getAsukkaita()); 
    landlord.lisaa(asukas1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi316 */
  @Test
  public void testEtsi316() {    // Landlord: 316
    Landlord landlord = new Landlord(); 
    Talo eka = new Talo(); 
    eka.rekisteroi(); 
    landlord.korvaaTaiLisaa(eka); 
    eka.aseta(1, "Kurvikallio"); 
    Collection <Talo> loydetyt = landlord.etsi("Kurvikallio", 1); 
    assertEquals("From: Landlord line: 323", 1, loydetyt.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta361 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta361() throws SailoException {    // Landlord: 361
    Landlord landlord = new Landlord(); 
    Talo talo1 = new Talo(); talo1.taytaOletus(); talo1.rekisteroi(); 
    Asunto aku1 = new Asunto(talo1.getId()); aku1.taytaOletus(); aku1.rekisteroi(); 
    Asunto aku2 = new Asunto(talo1.getId()); aku2.taytaOletus(); aku2.rekisteroi(); 
    Asukas pitsi21 = new Asukas(aku2.getId()); pitsi21.taytaOletus(); 
    Asukas pitsi11 = new Asukas(aku1.getId()); pitsi11.taytaOletus(); 
    Asukas pitsi22 = new Asukas(aku2.getId()); pitsi22.taytaOletus(); 
    Asukas pitsi12 = new Asukas(aku1.getId()); pitsi12.taytaOletus(); 
    Asukas pitsi23 = new Asukas(aku2.getId()); pitsi23.taytaOletus(); 
    String hakemisto = "testikelmit"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/asunnot.dat"); 
    File fhtied = new File(hakemisto+"/asukkaat.dat"); 
    File fttied = new File(hakemisto+"/talot.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    fttied.delete(); 
    try {
    landlord.lueTiedostosta(hakemisto); 
    fail("Landlord: 386 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    landlord.lisaa(talo1); 
    landlord.lisaa(aku1); 
    landlord.lisaa(aku2); 
    landlord.lisaa(pitsi21); 
    landlord.lisaa(pitsi11); 
    landlord.lisaa(pitsi22); 
    landlord.lisaa(pitsi12); 
    landlord.lisaa(pitsi23); 
    landlord.tallenna(); 
    landlord = new Landlord(); 
    landlord.lueTiedostosta(hakemisto); 
    landlord.lisaa(talo1); 
    landlord.lisaa(aku2); 
    landlord.lisaa(pitsi23); 
    landlord.tallenna(); 
    assertEquals("From: Landlord line: 402", true, ftied.delete()); 
    assertEquals("From: Landlord line: 403", true, fhtied.delete()); 
    assertEquals("From: Landlord line: 404", true, fttied.delete()); 
    File fbak = new File(hakemisto+"/asukkaat.bak"); 
    File fhbak = new File(hakemisto+"/asunnot.bak"); 
    File ftbak = new File(hakemisto+"/talot.bak"); 
    assertEquals("From: Landlord line: 408", true, fbak.delete()); 
    assertEquals("From: Landlord line: 409", true, fhbak.delete()); 
    assertEquals("From: Landlord line: 410", true, ftbak.delete()); 
    assertEquals("From: Landlord line: 411", true, dir.delete()); 
  } // Generated by ComTest END
}